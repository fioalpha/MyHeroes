//apply plugin: 'jacoco'
//
//jacoco {
//    toolVersion '0.8.10'
//}

//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//    jacoco.excludes = ['jdk.internal.*']
//}


//afterEvaluate {
//    project -> android.buildTypes.collect { type ->
//        type.name
//    }
//}
private static isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
    if (isAndroidModule(project)) setupAndroidReporting()
    else setupKotlinReporting()
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
    }

    def buildTypes = android.buildTypes.collect{
        type -> type.name
    }
    def productFlavors = android.productFlavors.collect {
        flavor -> flavor.name
    }
    println(buildTypes)
    println(productFlavors)

    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath, testTaskName
            sourceName = sourcePath = "${buildTypeName}"
            if(productFlavorName) {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            println(sourceName)
            println(sourcePath)
            testTaskName = "test${sourceName.capitalize()}UnitTest"
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage on teh ${sourceName.capitalize()} build."
                println("${project.buildDir}/intermediate/javac/${sourceName}/classes")
                def fileFilter = []

                def javaTree = fileTree(dir: "${project.buildDir}/intermediate/javac/${sourceName}/classes", excludes: fileFilter)
//                def eewe
//                d
            }
        }
    }
}

def setupKotlinReporting() {}